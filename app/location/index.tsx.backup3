import React, { useState, useRef, useEffect } from 'react';
import {
  StyleSheet,
  View,
  Text,
  TouchableOpacity,
  Alert,
  Dimensions,
  SafeAreaView,
  LogBox,
} from 'react-native';
import MapboxGL from '@rnmapbox/maps';
import * as Location from 'expo-location';

// Ignore specific warnings
LogBox.ignoreLogs([
  'new NativeEventEmitter',
]);

// Mapbox token
MapboxGL.setAccessToken('pk.eyJ1IjoidGVzdCIsImEiOiJjbGV0ZXN0In0.test'); // Replace with your token

const { width, height } = Dimensions.get('window');

const MapApp = () => {
  const mapRef = useRef(null);
  const cameraRef = useRef(null);
  const locationWatchId = useRef(null);

  const [markers, setMarkers] = useState([]);
  const [routeCoordinates, setRouteCoordinates] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [userLocation, setUserLocation] = useState(null);
  const [isTrackingLocation, setIsTrackingLocation] = useState(false);
  const [heading, setHeading] = useState(0);
  const [shouldFollowUser, setShouldFollowUser] = useState(true);
  const [isGettingDirections, setIsGettingDirections] = useState(false);
  const [currentSpeed, setCurrentSpeed] = useState(0);
  const [lastLocationTime, setLastLocationTime] = useState(null);
  const [lastLocationCoords, setLastLocationCoords] = useState(null);
  const [isUserInteracting, setIsUserInteracting] = useState(false);

  // Request location permission
  const requestLocationPermission = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      return status === 'granted';
    } catch (error) {
      console.warn('Permission error:', error);
      return false;
    }
  };

  // Calculate speed between two points
  const calculateSpeed = (newCoords, newTime) => {
    if (!lastLocationCoords || !lastLocationTime) return 0;

    const distance = calculateDistance(
      lastLocationCoords.latitude,
      lastLocationCoords.longitude,
      newCoords.latitude,
      newCoords.longitude
    );

    const timeDiff = (newTime - lastLocationTime) / 1000; // in seconds
    if (timeDiff <= 0) return 0;

    return distance / timeDiff; // meters per second
  };

  // Calculate distance between two coordinates in meters
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371e3; // Earth radius in meters
    const φ1 = lat1 * Math.PI / 180;
    const φ2 = lat2 * Math.PI / 180;
    const Δφ = (lat2 - lat1) * Math.PI / 180;
    const Δλ = (lon2 - lon1) * Math.PI / 180;

    const a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
      Math.cos(φ1) * Math.cos(φ2) *
      Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

    return R * c;
  };

  // Convert m/s to km/h
  const metersPerSecondToKmh = (speed) => {
    return speed * 3.6;
  };

  // Start location tracking
  const startLocationTracking = async () => {
    try {
      const hasPermission = await requestLocationPermission();
      if (!hasPermission) {
        Alert.alert('Permission Denied', 'Location permission is required to use this feature.');
        return;
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High,
      });

      const { latitude, longitude, heading, speed } = location.coords;
      const newLocation = [longitude, latitude];
      setUserLocation(newLocation);
      if (heading) setHeading(heading);
      setCurrentSpeed(speed || 0);
      setLastLocationTime(location.timestamp);
      setLastLocationCoords(location.coords);

      if (cameraRef.current) {
        cameraRef.current.setCamera({
          centerCoordinate: newLocation,
          zoomLevel: 15,
          animationDuration: 1000,
        });
      }

      const subscription = await Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.High,
          timeInterval: 1000,
          distanceInterval: 5,
        },
        (newLocation) => {
          const { latitude, longitude, heading, speed } = newLocation.coords;
          const updatedLocation = [longitude, latitude];
          setUserLocation(updatedLocation);
          if (heading) setHeading(heading);

          // Calculate speed if not provided
          const calculatedSpeed = speed !== undefined ? speed :
            calculateSpeed(newLocation.coords, newLocation.timestamp);

          setCurrentSpeed(calculatedSpeed);
          setLastLocationTime(newLocation.timestamp);
          setLastLocationCoords(newLocation.coords);

          if (shouldFollowUser && cameraRef.current && !isUserInteracting) {
            cameraRef.current.setCamera({
              centerCoordinate: updatedLocation,
              zoomLevel: 15,
              animationDuration: 500,
            });
          }

          // Update route if directions are active
          if (isGettingDirections && markers.length > 0) {
            getDirections(false);
          }
        }
      );

      locationWatchId.current = subscription;
      setIsTrackingLocation(true);

    } catch (error) {
      console.error('Location error:', error);
      Alert.alert('Location Error', 'Could not access your location. Please check your settings.');
    }
  };

  // Stop location tracking
  const stopLocationTracking = () => {
    if (locationWatchId.current) {
      locationWatchId.current.remove();
      locationWatchId.current = null;
    }
    setIsTrackingLocation(false);
    setCurrentSpeed(0);
  };

  // Toggle location tracking
  const toggleLocationTracking = () => {
    if (isTrackingLocation) {
      stopLocationTracking();
      setShouldFollowUser(false);
    } else {
      setShouldFollowUser(true);
      startLocationTracking();
    }
  };

  // Center map on user location
  const centerOnUserLocation = () => {
    if (userLocation && cameraRef.current) {
      cameraRef.current.setCamera({
        centerCoordinate: userLocation,
        zoomLevel: 15,
        animationDuration: 1000,
      });
      setShouldFollowUser(true);
    } else if (!isTrackingLocation) {
      setShouldFollowUser(true);
      startLocationTracking();
    }
  };

  // Handle map interaction start
  const handleInteractionStart = () => {
    setIsUserInteracting(true);
    setShouldFollowUser(false);
  };

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (locationWatchId.current) {
        locationWatchId.current.remove();
      }
    };
  }, []);

  // Handle map press to add markers
  const handleMapPress = async (feature) => {
    const { geometry } = feature;
    const [longitude, latitude] = geometry.coordinates;

    const newMarker = {
      id: Date.now(),
      coordinates: [longitude, latitude],
      title: `Destination`,
    };

    setMarkers([newMarker]); // Only keep the latest marker

    // If directions were already shown, update them
    if (isGettingDirections && userLocation) {
      getDirections(false);
    }
  };

  // Get directions using your custom routing service
  const getDirections = async (userInitiated = true) => {
    if (!userLocation) {
      Alert.alert('Need your location', 'Please enable location services to get directions');
      return;
    }

    if (markers.length === 0) {
      Alert.alert('Need a destination', 'Tap on the map to set a destination point');
      return;
    }

    if (userInitiated) {
      setIsGettingDirections(true);
      setIsLoading(true);
    }

    try {
      const currentMarker = markers[0];
      const waypoints = `${userLocation[0]},${userLocation[1]};${currentMarker.coordinates[0]},${currentMarker.coordinates[1]}`;

      const response = await fetch(
        `https://routes.kodam.in/route/v1/driving/${waypoints}?overview=full&geometries=geojson`
      );

      if (!response.ok) {
        throw new Error('Failed to get directions');
      }

      const data = await response.json();

      if (data.routes && data.routes.length > 0) {
        const coordinates = data.routes[0].geometry.coordinates;
        setRouteCoordinates(coordinates);

        if (userInitiated && cameraRef.current && coordinates.length > 0) {
          const bounds = coordinates.reduce(
            (bounds, coord) => {
              return [
                Math.min(bounds[0], coord[0]),
                Math.min(bounds[1], coord[1]),
                Math.max(bounds[2], coord[0]),
                Math.max(bounds[3], coord[1]),
              ];
            },
            [coordinates[0][0], coordinates[0][1], coordinates[0][0], coordinates[0][1]]
          );

          cameraRef.current.fitBounds(
            [bounds[0], bounds[1]],
            [bounds[2], bounds[3]],
            [50, 50, 50, 50],
            1000
          );
        }
      }
    } catch (error) {
      console.error('Error getting directions:', error);
      if (userInitiated) {
        Alert.alert('Error', 'Failed to get directions. Please try again.');
      }
    } finally {
      if (userInitiated) {
        setIsLoading(false);
      }
    }
  };

  // Clear all markers and routes
  const clearAll = () => {
    setMarkers([]);
    setRouteCoordinates([]);
    setIsGettingDirections(false);
  };

  // Center map to India
  const centerMap = () => {
    if (cameraRef.current) {
      cameraRef.current.setCamera({
        centerCoordinate: [82.547, 20.813],
        zoomLevel: 7,
        animationDuration: 1000,
      });
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <MapboxGL.MapView
        ref={mapRef}
        style={styles.map}
        onPress={handleMapPress}
        styleURL="https://tiles.kodam.in/styles/osm-bright/style.json"
        zoomEnabled={true}
        scrollEnabled={true}
        pitchEnabled={true}
        rotateEnabled={true}
        compassEnabled={true}
        scaleBarEnabled={true}
        minZoomLevel={7}
        onRegionWillChange={() => handleInteractionStart()}
        onRegionDidChange={() => setIsUserInteracting(false)}
      >
        <MapboxGL.Camera
          ref={cameraRef}
          centerCoordinate={[82.547, 20.813]}
          zoomLevel={7}
          minZoomLevel={7}
        />

        {/* User Location Blue Dot */}
        {userLocation && (
          <MapboxGL.PointAnnotation
            id="userLocation"
            coordinate={userLocation}
          >
            <View style={styles.userLocationContainer}>
              <View style={styles.userLocationPulse} />
              <View style={styles.userLocationDot} />
              {heading > 0 && (
                <View
                  style={[
                    styles.userLocationArrow,
                    { transform: [{ rotate: `${heading}deg` }] }
                  ]}
                />
              )}
            </View>
          </MapboxGL.PointAnnotation>
        )}

        {/* Render markers */}
        {markers.map((marker) => (
          <MapboxGL.PointAnnotation
            key={marker.id}
            id={marker.id.toString()}
            coordinate={marker.coordinates}
          >
            <View style={styles.markerContainer}>
              <View style={styles.marker}>
                <Text style={styles.markerNumber}>D</Text>
              </View>
            </View>
            <MapboxGL.Callout title={marker.title}>
              <View style={styles.callout}>
                <Text style={styles.calloutText}>{marker.title}</Text>
                <Text style={styles.calloutCoords}>
                  {marker.coordinates[1].toFixed(4)}, {marker.coordinates[0].toFixed(4)}
                </Text>
              </View>
            </MapboxGL.Callout>
          </MapboxGL.PointAnnotation>
        ))}

        {/* Render route */}
        {routeCoordinates.length > 0 && (
          <MapboxGL.ShapeSource
            id="route"
            shape={{
              type: 'Feature',
              properties: {},
              geometry: {
                type: 'LineString',
                coordinates: routeCoordinates,
              },
            }}
          >
            <MapboxGL.LineLayer
              id="routeLine"
              style={{
                lineColor: '#007AFF',
                lineWidth: 4,
                lineOpacity: 0.8,
                lineCap: 'round',
                lineJoin: 'round',
              }}
            />
          </MapboxGL.ShapeSource>
        )}
      </MapboxGL.MapView>

      {/* Control buttons */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={[
            styles.button,
            styles.primaryButton,
            (!userLocation || markers.length === 0) && styles.disabledButton
          ]}
          onPress={() => getDirections(true)}
          disabled={isLoading || !userLocation || markers.length === 0}
        >
          <Text style={styles.buttonText}>
            {isLoading ? 'Getting Route...' : 'Get Directions'}
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.button, styles.secondaryButton]}
          onPress={clearAll}
        >
          <Text style={[styles.buttonText, { color: '#007AFF' }]}>
            Clear All
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[styles.button, styles.secondaryButton]}
          onPress={centerMap}
        >
          <Text style={[styles.buttonText, { color: '#007AFF' }]}>
            Center Map
          </Text>
        </TouchableOpacity>
      </View>

      {/* Location button */}
      <TouchableOpacity
        style={[
          styles.locationButton,
          isTrackingLocation && styles.locationButtonActive
        ]}
        onPress={toggleLocationTracking}
      >
        <View style={styles.locationIcon}>
          <View style={[
            styles.locationIconDot,
            isTrackingLocation && styles.locationIconDotActive
          ]} />
        </View>
      </TouchableOpacity>

      {/* Follow button */}
      <TouchableOpacity
        style={[
          styles.followButton,
          shouldFollowUser && styles.followButtonActive
        ]}
        onPress={() => setShouldFollowUser(!shouldFollowUser)}
        disabled={!isTrackingLocation}
      >
        <Text style={[
          styles.followButtonText,
          shouldFollowUser && styles.followButtonTextActive
        ]}>
          {shouldFollowUser ? 'Following' : 'Follow'}
        </Text>
      </TouchableOpacity>

      {/* My Location button */}
      <TouchableOpacity
        style={styles.myLocationButton}
        onPress={centerOnUserLocation}
      >
        <Text style={styles.myLocationButtonText}>📍</Text>
      </TouchableOpacity>

      {/* Speed display */}
      {isTrackingLocation && (
        <View style={styles.speedDisplay}>
          <Text style={styles.speedText}>
            {metersPerSecondToKmh(currentSpeed).toFixed(1)} km/h
          </Text>
        </View>
      )}

      {/* Info panel */}
      <View style={styles.infoPanel}>
        <Text style={styles.infoText}>
          Tap on map to set destination • {markers.length > 0 ? 'Destination set' : 'No destination'}
        </Text>
        {routeCoordinates.length > 0 && (
          <Text style={styles.infoText}>
            Showing route from your location to destination
          </Text>
        )}
        {isTrackingLocation ? (
          <Text style={styles.infoText}>📍 Location tracking active</Text>
        ) : (
          <Text style={styles.infoText}>Location tracking inactive</Text>
        )}
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
  },
  map: {
    flex: 1,
  },
  buttonContainer: {
    position: 'absolute',
    top: 60,
    right: 15,
    flexDirection: 'column',
    gap: 10,
  },
  button: {
    paddingHorizontal: 15,
    paddingVertical: 10,
    borderRadius: 8,
    minWidth: 120,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  primaryButton: {
    backgroundColor: '#007AFF',
  },
  secondaryButton: {
    backgroundColor: 'white',
    borderWidth: 1,
    borderColor: '#007AFF',
  },
  disabledButton: {
    backgroundColor: '#cccccc',
  },
  buttonText: {
    color: 'white',
    fontWeight: '600',
    fontSize: 14,
  },
  locationButton: {
    position: 'absolute',
    bottom: 180,
    right: 15,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  locationButtonActive: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  locationIcon: {
    width: 24,
    height: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  locationIconDot: {
    width: 12,
    height: 12,
    borderRadius: 6,
    backgroundColor: '#666',
  },
  locationIconDotActive: {
    backgroundColor: 'white',
  },
  followButton: {
    position: 'absolute',
    bottom: 240,
    right: 15,
    width: 80,
    height: 40,
    borderRadius: 20,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  followButtonActive: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  followButtonText: {
    color: '#007AFF',
    fontWeight: '600',
    fontSize: 14,
  },
  followButtonTextActive: {
    color: 'white',
  },
  myLocationButton: {
    position: 'absolute',
    bottom: 120,
    right: 15,
    width: 50,
    height: 50,
    borderRadius: 25,
    backgroundColor: 'white',
    justifyContent: 'center',
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    borderWidth: 1,
    borderColor: '#E0E0E0',
  },
  myLocationButtonText: {
    fontSize: 20,
    textAlign: 'center',
  },
  speedDisplay: {
    position: 'absolute',
    top: 20,
    left: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    padding: 10,
    borderRadius: 8,
  },
  speedText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  markerContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 30,
    height: 30,
  },
  marker: {
    width: 24,
    height: 24,
    borderRadius: 12,
    backgroundColor: '#FF6B6B',
    borderWidth: 3,
    borderColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  markerNumber: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  userLocationContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 40,
    height: 40,
  },
  userLocationPulse: {
    position: 'absolute',
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(0, 122, 255, 0.2)',
    borderWidth: 2,
    borderColor: 'rgba(0, 122, 255, 0.4)',
  },
  userLocationDot: {
    width: 16,
    height: 16,
    borderRadius: 8,
    backgroundColor: '#007AFF',
    borderWidth: 3,
    borderColor: 'white',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  userLocationArrow: {
    position: 'absolute',
    width: 0,
    height: 0,
    borderLeftWidth: 6,
    borderRightWidth: 6,
    borderBottomWidth: 12,
    borderLeftColor: 'transparent',
    borderRightColor: 'transparent',
    borderBottomColor: '#007AFF',
    top: -2,
  },
  callout: {
    backgroundColor: 'white',
    padding: 10,
    borderRadius: 8,
    minWidth: 120,
  },
  calloutText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
  },
  calloutCoords: {
    fontSize: 12,
    color: '#666',
    textAlign: 'center',
    marginTop: 4,
  },
  infoPanel: {
    position: 'absolute',
    bottom: 20,
    left: 15,
    right: 80,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    padding: 10,
    borderRadius: 8,
  },
  infoText: {
    color: 'white',
    fontSize: 12,
    textAlign: 'center',
    marginBottom: 2,
  },
});

export default MapApp;